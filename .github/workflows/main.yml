name: CI

on: [push, pull_request]

env:
  DEFAULT_PYTHON: 3.11

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: chartboost/ruff-action@v1
        with:
          version: 0.6.3

  pylint:
    name: Check pylint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Run the automated tests (for example)
        run: poetry run pylint dataplaybook tests

      # - name: Upgrade pip
      #   run: python -m pip install --upgrade pip
      # - name: Add pylint
      #   run: pip install pylint
      # - name: Install dataplaybook
      #   run: pip install ".[mongodb,pptx,tests]"
      # - name: Run Pylint
      #   run: |
      #     pylint dataplaybook

  pytest:
    name: Run tests Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
    needs:
      - ruff
      - pylint
    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install -E all

      - name: Run tests and generate coverage report
        run: pytest --cov=./dataplaybook --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: PYTHON
          verbose: true
